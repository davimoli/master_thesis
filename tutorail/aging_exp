import pybamm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd



# ----------------------- PARAMETRISATION ----------------------

parameter_values = pybamm.ParameterValues("Chen2020")
parameter_values.update({"SEI kinetic rate constant [m.s-1]": 5e-15})       #Select parameter values and update some of them. 


# ----------------------- Models ----------------------
model = pybamm.lithium_ion.DFN(options={"SEI": "ec reaction limited",        # Type of side reactions
                                        "thermal": "lumped"})
model_no_deg = pybamm.lithium_ion.DFN()




# ----------------------- EXPERIMENTS ----------------------



C = parameter_values['Nominal cell capacity [A.h]']         # Instanciating a variable taken from a certain parameter of Chen2020 parameter set
N = 10
M = 20
experiment = pybamm.Experiment(          #RPT experiment, for more details please refer to https://docs.pybamm.org/en/latest/source/examples/notebooks/simulations_and_experiments/rpt-experiment.html
    [
        (
            "Discharge at 3C until 2.5V",


            "Charge at 0.3C until 4.2V",
            "Hold at 4.2V until C/50",
            "Rest for 1 hour",

        )
    ]
    * N
    + [
        (
            "Discharge at 0.1C until 2.5V",

            "Charge at 0.3C until 4.2V",
            "Hold at 4.2V until C/50",


        )
    ],

    termination="80% capacity",            # Possible to add termination to an experiment: https://docs.pybamm.org/en/latest/source/examples/notebooks/simulations_and_experiments/custom-experiments.html#Custom-termination
)




### Resting experiment ###
rest_experiment = pybamm.Experiment(
    [
        (
            "Discharge at 1C for 0.5 hours",
            "Rest for 3 hours",
        )
    ]
)

### Second experiment, after aging: AC current ###
def ac_current_step(t):
   # return 0.5*C*np.sin(2 * np.pi * t / 3600 * 4)
    return 0.5*C

def neg_ac_current_step(t):
   # return 0.5*C*np.sin(2 * np.pi * t / 3600 * 4)
    return -0.5*C

ac_experiment = pybamm.Experiment([

    (
        pybamm.step.current(ac_current_step, duration="0.1 hours"),

    )
])


# ----------------------- MY Simulations ----------------------

sim = pybamm.Simulation(
    model, experiment=experiment, parameter_values=parameter_values        #Instanciating our simulation with the model / exp & parameter sets 
)

sim_rest = pybamm.Simulation(
    model, experiment=rest_experiment, parameter_values=parameter_values
)

sim_ac = pybamm.Simulation(
    model, parameter_values=parameter_values, experiment=ac_experiment
)

### NO DEGRADATION ###
sim_no_deg = pybamm.Simulation(
    model_no_deg, experiment=experiment, parameter_values=parameter_values
)

sim_rest_no_deg = pybamm.Simulation(
    model_no_deg, experiment=rest_experiment, parameter_values=parameter_values
)

sim_ac_nodeg = pybamm.Simulation(
    model_no_deg, parameter_values=parameter_values, experiment=ac_experiment
)


# ----------------------- Solving the sims  ----------------------
sol = sim.solve(initial_soc=1)          #Running the experiment one time with initial SoC = 100%

# We did our first 10 cycles and the simulation is built, lets now loop over M:
for i in range(M):
    if i != 0:
        sol = sim.solve(starting_solution=sol)      # Finally solving the experiment, interesting infos here : https://docs.pybamm.org/en/stable/source/examples/notebooks/simulations_and_experiments/simulating-long-experiments.html
